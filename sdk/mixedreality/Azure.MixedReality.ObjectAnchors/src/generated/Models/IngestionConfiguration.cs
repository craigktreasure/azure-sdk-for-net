// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace Azure.MixedReality.ObjectAnchors.Models
{
    /// <summary> Represents an ingestion configuration. </summary>
    public partial class IngestionConfiguration
    {

        /// <summary> Initializes a new instance of IngestionConfiguration. </summary>
        /// <param name="dimensionsWrapper"> . </param>
        /// <param name="boundingBoxCenterWrapper"> . </param>
        /// <param name="gravityWrapper"> . </param>
        /// <param name="keyFrameIndexes"> Indices of Key Frames. </param>
        /// <param name="gtTrajectory"> Ground truth trajectory. </param>
        /// <param name="principalAxisWrapper"> . </param>
        /// <param name="scale"> Scale of transformation of asset units into meter space. </param>
        /// <param name="supportingPlaneWrapper"> . </param>
        /// <param name="testTrajectory"> Test Trajectory. </param>
        internal IngestionConfiguration(Vector3 dimensionsWrapper, Vector3 boundingBoxCenterWrapper, Vector3 gravityWrapper, IList<int> keyFrameIndexes, IList<TrajectoryPose> gtTrajectory, Quaternion principalAxisWrapper, float scale, Vector4 supportingPlaneWrapper, IList<TrajectoryPose> testTrajectory)
        {
            DimensionsWrapper = dimensionsWrapper;
            BoundingBoxCenterWrapper = boundingBoxCenterWrapper;
            GravityWrapper = gravityWrapper;
            KeyFrameIndexes = keyFrameIndexes;
            GtTrajectory = gtTrajectory;
            PrincipalAxisWrapper = principalAxisWrapper;
            Scale = scale;
            SupportingPlaneWrapper = supportingPlaneWrapper;
            TestTrajectory = testTrajectory;
        }
        /// <summary> Indices of Key Frames. </summary>
        public IList<int> KeyFrameIndexes { get; }
        /// <summary> Ground truth trajectory. </summary>
        public IList<TrajectoryPose> GtTrajectory { get; }
        /// <summary> Scale of transformation of asset units into meter space. </summary>
        public float Scale { get; set; }
        /// <summary> Test Trajectory. </summary>
        public IList<TrajectoryPose> TestTrajectory { get; }
    }
}
