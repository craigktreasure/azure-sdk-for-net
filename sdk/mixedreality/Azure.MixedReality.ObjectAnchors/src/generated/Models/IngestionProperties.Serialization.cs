// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.MixedReality.ObjectAnchors.Models
{
    public partial class IngestionProperties : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(JobStatus))
            {
                writer.WritePropertyName("jobStatus");
                writer.WriteStringValue(JobStatus.Value.ToSerialString());
            }
            if (Optional.IsDefined(AssetFileType))
            {
                writer.WritePropertyName("assetFileType");
                writer.WriteStringValue(AssetFileType);
            }
            if (Optional.IsDefined(InputAssetUriString))
            {
                writer.WritePropertyName("inputAssetUri");
                writer.WriteStringValue(InputAssetUriString);
            }
            if (Optional.IsDefined(IngestionConfiguration))
            {
                writer.WritePropertyName("ingestionConfiguration");
                writer.WriteObjectValue(IngestionConfiguration);
            }
            writer.WriteEndObject();
        }

        internal static IngestionProperties DeserializeIngestionProperties(JsonElement element)
        {
            Optional<string> clientErrorDetails = default;
            Optional<string> serverErrorDetails = default;
            Optional<Guid> jobId = default;
            Optional<string> outputModelUri = default;
            Optional<JobStatus> jobStatus = default;
            Optional<string> assetFileType = default;
            Optional<string> inputAssetUri = default;
            Optional<Guid> accountId = default;
            Optional<IngestionConfiguration> ingestionConfiguration = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("clientErrorDetails"))
                {
                    clientErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("serverErrorDetails"))
                {
                    serverErrorDetails = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("outputModelUri"))
                {
                    outputModelUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("jobStatus"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    jobStatus = property.Value.GetString().ToJobStatus();
                    continue;
                }
                if (property.NameEquals("assetFileType"))
                {
                    assetFileType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("inputAssetUri"))
                {
                    inputAssetUri = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("accountId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    accountId = property.Value.GetGuid();
                    continue;
                }
                if (property.NameEquals("ingestionConfiguration"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    ingestionConfiguration = IngestionConfiguration.DeserializeIngestionConfiguration(property.Value);
                    continue;
                }
            }
            return new IngestionProperties(clientErrorDetails.Value, serverErrorDetails.Value, Optional.ToNullable(jobId), outputModelUri.Value, Optional.ToNullable(jobStatus), assetFileType.Value, inputAssetUri.Value, Optional.ToNullable(accountId), ingestionConfiguration.Value);
        }
    }
}
