// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.MixedReality.ObjectAnchors.Models
{
    public partial class IngestionConfiguration : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            if (Optional.IsDefined(DimensionsWrapper))
            {
                writer.WritePropertyName("dimensions");
                writer.WriteObjectValue(DimensionsWrapper);
            }
            if (Optional.IsDefined(BoundingBoxCenterWrapper))
            {
                writer.WritePropertyName("boundingBoxCenter");
                writer.WriteObjectValue(BoundingBoxCenterWrapper);
            }
            writer.WritePropertyName("gravity");
            writer.WriteObjectValue(GravityWrapper);
            if (Optional.IsCollectionDefined(KeyFrameIndexes))
            {
                writer.WritePropertyName("keyFrameIndexes");
                writer.WriteStartArray();
                foreach (var item in KeyFrameIndexes)
                {
                    writer.WriteNumberValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsCollectionDefined(GtTrajectory))
            {
                writer.WritePropertyName("gtTrajectory");
                writer.WriteStartArray();
                foreach (var item in GtTrajectory)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            if (Optional.IsDefined(PrincipalAxisWrapper))
            {
                writer.WritePropertyName("principalAxis");
                writer.WriteObjectValue(PrincipalAxisWrapper);
            }
            writer.WritePropertyName("scale");
            writer.WriteNumberValue(Scale);
            if (Optional.IsDefined(SupportingPlaneWrapper))
            {
                writer.WritePropertyName("supportingPlane");
                writer.WriteObjectValue(SupportingPlaneWrapper);
            }
            if (Optional.IsCollectionDefined(TestTrajectory))
            {
                writer.WritePropertyName("testTrajectory");
                writer.WriteStartArray();
                foreach (var item in TestTrajectory)
                {
                    writer.WriteObjectValue(item);
                }
                writer.WriteEndArray();
            }
            writer.WriteEndObject();
        }

        internal static IngestionConfiguration DeserializeIngestionConfiguration(JsonElement element)
        {
            Optional<Vector3> dimensions = default;
            Optional<Vector3> boundingBoxCenter = default;
            Vector3 gravity = default;
            Optional<IList<int>> keyFrameIndexes = default;
            Optional<IList<TrajectoryPose>> gtTrajectory = default;
            Optional<Quaternion> principalAxis = default;
            float scale = default;
            Optional<Vector4> supportingPlane = default;
            Optional<IList<TrajectoryPose>> testTrajectory = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("dimensions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    dimensions = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("boundingBoxCenter"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    boundingBoxCenter = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("gravity"))
                {
                    gravity = Vector3.DeserializeVector3(property.Value);
                    continue;
                }
                if (property.NameEquals("keyFrameIndexes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<int> array = new List<int>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetInt32());
                    }
                    keyFrameIndexes = array;
                    continue;
                }
                if (property.NameEquals("gtTrajectory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TrajectoryPose> array = new List<TrajectoryPose>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TrajectoryPose.DeserializeTrajectoryPose(item));
                    }
                    gtTrajectory = array;
                    continue;
                }
                if (property.NameEquals("principalAxis"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    principalAxis = Quaternion.DeserializeQuaternion(property.Value);
                    continue;
                }
                if (property.NameEquals("scale"))
                {
                    scale = property.Value.GetSingle();
                    continue;
                }
                if (property.NameEquals("supportingPlane"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    supportingPlane = Vector4.DeserializeVector4(property.Value);
                    continue;
                }
                if (property.NameEquals("testTrajectory"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<TrajectoryPose> array = new List<TrajectoryPose>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(TrajectoryPose.DeserializeTrajectoryPose(item));
                    }
                    testTrajectory = array;
                    continue;
                }
            }
            return new IngestionConfiguration(dimensions.Value, boundingBoxCenter.Value, gravity, Optional.ToList(keyFrameIndexes), Optional.ToList(gtTrajectory), principalAxis.Value, scale, supportingPlane.Value, Optional.ToList(testTrajectory));
        }
    }
}
