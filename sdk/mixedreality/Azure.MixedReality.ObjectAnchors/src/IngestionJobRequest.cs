using Azure.MixedReality.ObjectAnchors.Models;
using System;
using System.Collections.Generic;
using System.Text;

namespace Azure.MixedReality.ObjectAnchors
{
    public class IngestionJobRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngestionJobRequest"/> class.
        /// </summary>
        /// <param name="assetConfiguration">The asset configuration.</param>
        /// <param name="inputFilePath">The path to the Asset to be ingested by the Object Anchors service.</param>
        /// <param name="outputFilePath">The path to save the model generated by the Object Anchors service.</param>
        public IngestionJobRequest(IngestionConfiguration assetConfiguration, string inputFilePath, string outputFilePath = null)
        {
            if (string.IsNullOrWhiteSpace(inputFilePath))
            {
                throw new ArgumentNullOrWhiteSpaceException(nameof(inputFilePath));
            }

            if (string.IsNullOrWhiteSpace(outputFilePath))
            {
                outputFilePath = $"{Path.GetDirectoryName(inputFilePath)}\\{Path.GetFileNameWithoutExtension(inputFilePath)}_{this.JobId}.ou";
            }

            if (assetConfiguration is null)
            {
                throw new ArgumentNullException(nameof(assetConfiguration));
            }

            if (!IsValid(assetConfiguration, out string assetConfigurationInvalidMessage))
            {
                throw new ArgumentException(assetConfigurationInvalidMessage, nameof(assetConfiguration));
            }

            this.InputFilePath = inputFilePath;
            this.AssetFileType = Path.GetExtension(inputFilePath);
            this.AssetConfigurationValues = assetConfiguration;
            this.OutputFilePath = outputFilePath;
        }

        internal bool IsValid(Vector3 gravity, out string invalidMessage)
        {
            invalidMessage = null;

            if (!gravity.IsNormalized())
            {
                invalidMessage = $"The value for {nameof(IngestionConfiguration.Gravity)} must be normalized.";
            }

            return invalidMessage is null;
        }
    }
}
