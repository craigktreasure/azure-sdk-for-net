// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

namespace Azure.MixedReality.ObjectAnchors.Models
{
    /// <summary> The Vector3. </summary>
    internal partial class Vector3
    {
        internal System.Numerics.Vector3? data = null;

        /// <summary> Initializes a new instance of Vector3. </summary>
        public Vector3()
        {
        }

        /// <summary> Initializes a new instance of Vector3. </summary>
        /// <param name="x"> . </param>
        /// <param name="y"> . </param>
        /// <param name="z"> . </param>
        internal Vector3(float? x, float? y, float? z)
        {
            if (x.HasValue && y.HasValue && z.HasValue)
            {
                data = new System.Numerics.Vector3(x.Value, y.Value, z.Value);
            }
        }

        public float? X 
        {
            get 
            {
                return data.HasValue ? data.Value.X : null;
            } 
            set 
            {
                if (value == null)
                {
                    data = null;
                }
                if (data.HasValue)
                {
                    var tmp = data.Value;
                    tmp.X = value.Value;
                    data = tmp;
                }
                else
                {
                    var tmp = new System.Numerics.Vector3();
                    tmp.X = value.Value;
                    data = tmp;
                }
            }
        }

        public float? Y
        {
            get
            {
                return data.HasValue ? data.Value.Y : null;
            }
            set
            {
                if (value == null)
                {
                    data = null;
                }
                if (data.HasValue)
                {
                    var tmp = data.Value;
                    tmp.Y = value.Value;
                    data = tmp;
                }
                else
                {
                    var tmp = new System.Numerics.Vector3();
                    tmp.Y = value.Value;
                    data = tmp;
                }
            }
        }

        public float? Z
        {
            get
            {
                return data.HasValue ? data.Value.Z : null;
            }
            set
            {
                if (value == null)
                {
                    data = null;
                }
                if (data.HasValue)
                {
                    var tmp = data.Value;
                    tmp.Z = value.Value;
                    data = tmp;
                }
                else
                {
                    var tmp = new System.Numerics.Vector3();
                    tmp.Z = value.Value;
                    data = tmp;
                }
            }
        }

        public bool IsNormalized()
        {
            if (data == null)
            {
                return false;
            }

            return data.Value.IsNormalized();
        }
    }
}
