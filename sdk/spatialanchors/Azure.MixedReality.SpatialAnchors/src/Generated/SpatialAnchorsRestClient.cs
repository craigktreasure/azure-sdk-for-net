// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.MixedReality.SpatialAnchors.Client.Models;

namespace Azure.MixedReality.SpatialAnchors.Client
{
    internal partial class SpatialAnchorsRestClient
    {
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of SpatialAnchorsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        public SpatialAnchorsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null, string apiVersion = "2019-02-28-preview")
        {
            endpoint ??= new Uri("https://manage.sa.mixedreality.azure.com");

            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateDeleteAnchorRequest(string accountId, string spatialAnchorId, string ifMatch, DeleteRequestOptions deleteRequestOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/Accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/spatialanchors/", false);
            uri.AppendPath(spatialAnchorId, true);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            request.Headers.Add("If-Match", ifMatch);
            if (deleteRequestOptions?.ClientRequestId != null)
            {
                request.Headers.Add("X-MRC-CV", deleteRequestOptions.ClientRequestId);
            }
            return message;
        }

        /// <summary> Deletes an anchor by id. </summary>
        /// <param name="accountId"> The account identifier. </param>
        /// <param name="spatialAnchorId"> The spatial anchor identifier. </param>
        /// <param name="ifMatch"> The anchor etag. </param>
        /// <param name="deleteRequestOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="spatialAnchorId"/>, or <paramref name="ifMatch"/> is null. </exception>
        public async Task<ResponseWithHeaders<SpatialAnchorsDeleteAnchorHeaders>> DeleteAnchorAsync(string accountId, string spatialAnchorId, string ifMatch, DeleteRequestOptions deleteRequestOptions = null, CancellationToken cancellationToken = default)
        {
            if (accountId == null)
            {
                throw new ArgumentNullException(nameof(accountId));
            }
            if (spatialAnchorId == null)
            {
                throw new ArgumentNullException(nameof(spatialAnchorId));
            }
            if (ifMatch == null)
            {
                throw new ArgumentNullException(nameof(ifMatch));
            }

            using var message = CreateDeleteAnchorRequest(accountId, spatialAnchorId, ifMatch, deleteRequestOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new SpatialAnchorsDeleteAnchorHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes an anchor by id. </summary>
        /// <param name="accountId"> The account identifier. </param>
        /// <param name="spatialAnchorId"> The spatial anchor identifier. </param>
        /// <param name="ifMatch"> The anchor etag. </param>
        /// <param name="deleteRequestOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/>, <paramref name="spatialAnchorId"/>, or <paramref name="ifMatch"/> is null. </exception>
        public ResponseWithHeaders<SpatialAnchorsDeleteAnchorHeaders> DeleteAnchor(string accountId, string spatialAnchorId, string ifMatch, DeleteRequestOptions deleteRequestOptions = null, CancellationToken cancellationToken = default)
        {
            if (accountId == null)
            {
                throw new ArgumentNullException(nameof(accountId));
            }
            if (spatialAnchorId == null)
            {
                throw new ArgumentNullException(nameof(spatialAnchorId));
            }
            if (ifMatch == null)
            {
                throw new ArgumentNullException(nameof(ifMatch));
            }

            using var message = CreateDeleteAnchorRequest(accountId, spatialAnchorId, ifMatch, deleteRequestOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new SpatialAnchorsDeleteAnchorHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    return ResponseWithHeaders.FromValue(headers, message.Response);
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetPropertiesByIdRequest(string accountId, SpatialAnchorsPropertiesRequest body, PropertiesRequestOptions propertiesRequestOptions)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/Accounts/", false);
            uri.AppendPath(accountId, true);
            uri.AppendPath("/spatialanchors/properties", false);
            if (apiVersion != null)
            {
                uri.AppendQuery("api-version", apiVersion, true);
            }
            request.Uri = uri;
            if (propertiesRequestOptions?.ClientRequestId != null)
            {
                request.Headers.Add("X-MRC-CV", propertiesRequestOptions.ClientRequestId);
            }
            request.Headers.Add("Content-Type", "application/json-patch+json");
            request.Headers.Add("Accept", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(body);
            request.Content = content;
            return message;
        }

        /// <summary> Gets anchor properties by spatial anchor id. </summary>
        /// <param name="accountId"> The String to use. </param>
        /// <param name="body"> The spatial anchor properties request. </param>
        /// <param name="propertiesRequestOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="body"/> is null. </exception>
        public async Task<ResponseWithHeaders<SpatialAnchorsPropertiesResponse, SpatialAnchorsGetPropertiesByIdHeaders>> GetPropertiesByIdAsync(string accountId, SpatialAnchorsPropertiesRequest body, PropertiesRequestOptions propertiesRequestOptions = null, CancellationToken cancellationToken = default)
        {
            if (accountId == null)
            {
                throw new ArgumentNullException(nameof(accountId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetPropertiesByIdRequest(accountId, body, propertiesRequestOptions);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            var headers = new SpatialAnchorsGetPropertiesByIdHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpatialAnchorsPropertiesResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = SpatialAnchorsPropertiesResponse.DeserializeSpatialAnchorsPropertiesResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets anchor properties by spatial anchor id. </summary>
        /// <param name="accountId"> The String to use. </param>
        /// <param name="body"> The spatial anchor properties request. </param>
        /// <param name="propertiesRequestOptions"> Parameter group. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="accountId"/> or <paramref name="body"/> is null. </exception>
        public ResponseWithHeaders<SpatialAnchorsPropertiesResponse, SpatialAnchorsGetPropertiesByIdHeaders> GetPropertiesById(string accountId, SpatialAnchorsPropertiesRequest body, PropertiesRequestOptions propertiesRequestOptions = null, CancellationToken cancellationToken = default)
        {
            if (accountId == null)
            {
                throw new ArgumentNullException(nameof(accountId));
            }
            if (body == null)
            {
                throw new ArgumentNullException(nameof(body));
            }

            using var message = CreateGetPropertiesByIdRequest(accountId, body, propertiesRequestOptions);
            _pipeline.Send(message, cancellationToken);
            var headers = new SpatialAnchorsGetPropertiesByIdHeaders(message.Response);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        SpatialAnchorsPropertiesResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = SpatialAnchorsPropertiesResponse.DeserializeSpatialAnchorsPropertiesResponse(document.RootElement);
                        return ResponseWithHeaders.FromValue(value, headers, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
